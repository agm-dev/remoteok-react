{"version":3,"sources":["components/header/Header.js","components/search/Search.js","components/job/Job.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","this","props","jobs","React","Component","Search","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchText","searchResults","filters","handleChange","bind","assertThisInitialized","handleKeyDown","text","data","arguments","length","undefined","console","log","concat","event","target","value","tags","filter","tag","includes","setState","key","results","filterToSet","toConsumableArray","selectedFiltersHandler","slice","split","join","className","map","type","onChange","onKeyDown","Job","title","JOBS_API_URL","getTags","reduce","final","current","Array","isArray","toAdd","item","toLowerCase","useFetchJobs","_useState","useState","_useState2","slicedToArray","setJobs","_useState3","_useState4","loading","setLoading","_useState5","_useState6","setTags","_useState7","_useState8","selectedJobs","setSelectedJobs","_fetchJobs","asyncToGenerator","regenerator_default","mark","_callee","response","json","wrap","_context","prev","next","fetch","sent","stop","apply","useEffect","fetchJobs","App","_useFetchJobs","_useFetchJobs2","Fragment","Header_Header","Search_Search","job","every","Job_Job","position","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca43fd60.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n  render () {\n    return (\n      <header>\n        <h1>Remote Jobs ({ this.props.jobs })</h1>\n      </header>\n    );\n  }\n}\n","import React from 'react';\n//import SearchInput from './search-input/SearchInput';\n\nexport default class Search extends React.Component {\n\n  // this.props.tags as string[]\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      searchResults: [],\n      filters: [],\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  log (text, data = '') {\n    const prefix = '[search]';\n    console.log(`${prefix} ${text}`, data);\n  }\n\n  handleChange (event) {\n    const searchText = event.target.value;\n    const searchResults = searchText.length ? this.props.tags.filter(tag => tag.includes(searchText)) : [];\n    this.setState({ searchText, searchResults });\n    this.log('searchText changed to ', searchText);\n  }\n\n  handleKeyDown (event) {\n    const key = event.key;\n    if (key === 'Enter') {\n      const results = this.state.searchResults;\n      const filterToSet = results.length ? results[0] : null;\n      const validFilterAddition = filterToSet && !this.state.filters.includes(filterToSet);\n      if (validFilterAddition) {\n        this.log('set filter: ', filterToSet);\n        const filters = [...this.state.filters, filterToSet];\n        this.setState({\n          filters: filters,\n          searchText: '',\n          searchResults: [],\n        });\n        this.props.selectedFiltersHandler(filters);\n      }\n    } else if (key === 'Backspace') {\n      const text = this.state.searchText;\n      if (!text.length && this.state.filters.length) {\n        const filters = this.state.filters.slice(0, -1);\n        this.setState(state => ({\n          filters,\n          searchText: state.filters.slice(-1)[0].split('').slice(0, -1).join(''),\n        }));\n        this.props.selectedFiltersHandler(filters);\n      }\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"search\">\n        <div className=\"applied-filters\">\n          <ul>\n            { this.state.filters.map((filter, key) => (\n              <li key={ key }>{ filter }</li>\n            )) }\n          </ul>\n        </div>\n        <div className=\"search-input\">\n          <label>Search: </label>\n          <input\n            type=\"text\"\n            onChange={ this.handleChange }\n            value={ this.state.searchText }\n            onKeyDown={ this.handleKeyDown }\n          />\n        </div>\n        <div className=\"search-results\">\n          <ul>\n            { this.state.searchResults.map((tag, key) => (\n              <li key={ key }>{ tag }</li>\n            )) }\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\n/**\n * applied filters\n *  filter tag\n * search input\n * search results\n *  filter item\n */","import React from 'react';\n\nexport default class Job extends React.Component {\n  render () {\n    return (\n      <div className=\"job\">\n        <p>{this.props.title} [{ this.props.tags.join(', ') }]</p>\n      </div>\n    )\n  }\n}\n","import { useState, useEffect } from 'react';\n\nconst JOBS_API_URL = 'https://brainl.es/remoteok/v1/remotejobs';\n\nfunction getTags(data = []) {\n  return data.reduce((final, current) => {\n    if (typeof current.tags !== 'undefined' && Array.isArray(current.tags)) {\n      const toAdd = current.tags\n        .filter(item => !final.includes(item))\n        .map(item => item.toLowerCase());\n      return [...final, ...toAdd];\n    }\n    return final;\n  }, []);\n}\n\nfunction useFetchJobs() {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [tags, setTags] = useState([]);\n  const [selectedJobs, setSelectedJobs] = useState([]);\n\n  async function fetchJobs () {\n    const response = await fetch(JOBS_API_URL);\n    const json = await response.json();\n    const jobs = json.slice(1); // first result is legal text\n\n    setJobs(jobs);\n    setLoading(false);\n    setTags(getTags(jobs));\n    setSelectedJobs(jobs);\n  }\n\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n\n  return [jobs, tags, loading, selectedJobs, setSelectedJobs];\n}\n\nexport { useFetchJobs };\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header/Header';\nimport Search from './components/search/Search';\nimport Job from './components/job/Job';\nimport { useFetchJobs } from './hooks';\n\nfunction App() {\n\n  const [jobs, tags, loading, selectedJobs, setSelectedJobs] = useFetchJobs();\n\n  function selectedFiltersHandler(filters) {\n    if (!filters.length) {\n      setSelectedJobs(jobs);\n      return;\n    }\n\n    const selectedJobs = jobs.filter(job => {\n      const isInTags = filter => job.tags.includes(filter);\n      return filters.every(isInTags);\n    });\n    setSelectedJobs(selectedJobs);\n  }\n\n  return loading ? (\n    <p>Loading...</p>\n  ) : (\n    <>\n      <Header jobs={ selectedJobs.length }/>\n      <Search tags={ tags } selectedFiltersHandler={ selectedFiltersHandler }/>\n      { selectedJobs.map((job, key) => <Job key={ key } title={ job.position } tags={ job.tags }/>) }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}